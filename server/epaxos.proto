syntax = "proto3";

package epaxos;

// service EpaxosInternal {
//     rpc pre_accept(Payload) returns (Payload);
//     rpc accept(Payload) returns (AcceptOKPayload);
//     rpc commit(Payload) returns (Empty);
// }

service EpaxosService {
    rpc pre_accept(Payload) returns (Payload) {};
    rpc accept(Payload) returns (AcceptOKPayload) {};
    rpc commit(Payload) returns (Empty) {};
    rpc write(WriteRequest) returns (WriteResponse) {};
    rpc read(ReadRequest) returns (ReadResponse) {};
    rpc prepare(Payload) returns (PrepareOKPayload) {}
}

message WriteRequest {
    string key = 1;
    int32 value = 2;
}

message WriteResponse {
    bool commit = 1;
}

message ReadRequest {
    string key = 1;
}

message ReadResponse {
    int32 value = 1;
}

message Instance {
    uint32 replica = 1;
    uint32 slot = 2;
}

message Payload {
    uint32 ballot = 1;
    WriteRequest write_req = 2;
    uint32 seq = 3;
    repeated Instance deps = 4;
    Instance instance = 5;
}

message AcceptOKPayload {
    WriteRequest command = 1;
    Instance instance = 4;
}

message PrepareOKPayload {
    WriteRequest command = 1;
    uint32 ballot = 2;
    Instance instance = 4;
}

message Empty {}