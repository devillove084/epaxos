syntax = "proto3";

package epaxos;

service EpaxosService {
  rpc pre_accept(PreAcceptPayload) returns (PreAcceptReplyPayload) {};
  //rpc pre_accept_ok(PreAcceptOKPayload) returns (Empty) {};
  rpc accept(AcceptPayload) returns (AcceptReplyPayload) {};
  rpc commit(CommitPayload) returns (Empty) {};
  rpc commitshort(CommitShortPayload) returns (Empty) {};
  // rpc write(WriteRequest) returns (WriteResponse) {};
  // rpc read(ReadRequest) returns (ReadResponse) {};
  //rpc propose(ProposePayload) returns (ProposeReplyPayload) {};
  rpc propose(ProposePayload) returns (Empty) {};
  rpc prepare(PreparePayload) returns (PrepareReplyPayload) {};
  rpc try_pre_accept(TryPreAcceptPayload) returns (TryPreAcceptReplyPayload) {};
}

enum Operation {
  PUT = 0;
  PUT_BLIND = 1; // Result not needed immediately
                 // PUTRANGE = 2;
  GET = 2;
  // GETRANGE = 4;
  // UPDATE = 5;
  // DELETE = 6;
}

message Command {
  Operation op = 1;
  string key = 2;
  int32 value = 3;
}

message ProposePayload {
  uint32 command_id = 1;
  repeated Command command = 2;
  uint64 timestamp = 3;
}

message ProposeReplyPayload {
  bool ok = 1;
  uint32 command_id = 2;
  int32 value = 3;
  uint64 timestamp = 4;
}

message Instance {
  uint32 replica = 1;
  uint32 slot = 2;
}

enum State {
  PREACCEPTED = 0;
  PREACCEPTEDEQ = 1;
  ACCEPTED = 2;
  COMMITTED = 3;
  EXECUTED = 4;
}

// message Payload {
//   uint32 ballot = 1;
//   // WriteRequest write_req = 2;
//   repeated Command command = 2;
//   uint32 seq = 3;
//   repeated Instance deps = 4;
//   Instance instance = 5;
//   State state = 6;
//   CommandLeaderBookKeeping clbk = 7;
// }

// message RecoveryPayload {
//   uint32 ballot = 1;
//   // WriteRequest write_req = 2;
//   Command command = 2;
//   uint32 seq = 3;
//   repeated Instance deps = 4;
//   Instance instance = 5;
//   uint32 pre_accept_count = 6;
//   bool command_leader_response = 7;
// }

// message CommandLeaderBookKeeping {
//   repeated Propose client_proposal = 1;
//   uint32 max_recv_ballot = 2;
//   uint32 prepare_oks = 3;
//   bool all_equal = 4;
//   uint32 pre_accept_oks = 5;
//   uint32 accept_oks = 6;
//   uint32 nacks = 7;
//   repeated Instance original_deps = 8;
//   repeated Instance committed_deps = 9;
//   RecoveryPayload recovery_insts = 10;
//   bool preparing = 11;
//   bool trying_to_pre_accept = 12;
//   repeated bool possible_quorum = 13;
//   uint32 tpa_oks = 14;
//   uint64 commit_time = 15;
// }

message PreAcceptPayload {
  uint32 leader_id = 1;
  Instance instance = 2;
  uint32 ballot = 3;
  repeated Command command = 4;
  uint32 seq = 5;
  repeated uint32 deps = 6;
}

// enum PAReply {
//   PREACCEPTREPLYPAYLOAD = 0;
//   PREACCEPTOKPAYLOAD = 1;
// }

// message PreAcceptReply {
//   PAReply reply = 1;
// }

message PreAcceptReplyPayload {
  Instance instance = 1;
  uint32 ok = 2;
  uint32 ballot = 3;
  repeated Command command = 4;
  uint32 seq = 5;
  repeated uint32 deps = 6;
  repeated uint32 committed_deps = 7;
}

message PreAcceptOKPayload {
  Instance instance = 1;
}

message AcceptPayload {
  uint32 leader_id = 1;
  Instance instance = 2;
  uint32 ballot = 3;
  uint32 count = 4;
  uint32 seq = 5;
  repeated uint32 deps = 6;
}

message AcceptReplyPayload {
  Instance instance = 1;
  uint32 ok = 2;
  uint32 ballot = 3;
}

message CommitPayload {
  uint32 leader_id = 1;
  Instance instance = 2;
  repeated Command command = 3;
  uint32 seq = 4;
  repeated uint32 deps = 5;
}

message CommitShortPayload {
  uint32 leader_id = 1;
  Instance instance = 2;
  uint32 count = 3;
  uint32 seq = 4;
  repeated uint32 deps = 5;
}

message PreparePayload {
  uint32 leader_id = 1;
  Instance instance = 2;
  uint32 ballot = 3;
}

message PrepareReplyPayload {
  uint32 accept_id = 1;
  uint32 ok = 2;
  Instance instance = 3;
  uint32 ballot = 4;
  State state = 5;
  repeated Command command = 6;
  uint32 seq = 7;
  repeated uint32 deps = 8;
}

message TryPreAcceptPayload {
  uint32 leader_id = 1;
  Instance instance = 2;
  uint32 ballot = 3;
  repeated Command command = 4;
  uint32 seq = 5;
  repeated uint32 deps = 6;
}

message TryPreAcceptReplyPayload {
  uint32 accept_id = 1;
  Instance instance = 2;
  uint32 ok = 3;
  uint32 ballot = 4;
  Instance conflict_instance = 5;
  State conflict_state = 6;
}

message Empty {}